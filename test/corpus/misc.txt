
==================
3.6 String Concatenation Expressions
==================

"con" || "cat" || "enate"

---

(module (string_concat_expr (string_literal) (string_concat_expr (string_literal) (string_literal))))


==================
3.7 Comparison Expressions
==================

1 = 2

---

(module (comparison_expr (integer_literal) (integer_literal)))

==================
3.8 Logical Expressions
==================

1 eq 1 and 2 eq 2

---

(module 
  (and_expr 
  (comparison_expr (integer_literal) (integer_literal))
  (comparison_expr (integer_literal) (integer_literal))))

==================
3.13 Unordered Expression 
==================

unordered { }

---

(module 
 (unordered_expr (enclosed_expr))
)

==================
3.13 Ordered Expression 
==================

ordered { }

---

(module 
 (ordered_expr (enclosed_expr))
)


==================
3.14 Conditional Expressions 
==================

if ( 'text' )
  then 'this'   
  else 'that'

---

(module 
 (if_expr 
  (if_condition (string_literal)) 
  (then_consequence (string_literal)) 
  (else_alternative (string_literal))
 ))

==================
3.14 Conditional:  main module with multiple if else
==================

if ( 'pigs walk on 4 legs' ) then 'good'  
else if ( 'pigs walk on 2 legs') then 'better' 
else 'pigs fly'

---

(module 
 (if_expr 
  (if_condition (string_literal)) 
  (then_consequence (string_literal)) 
  (else_alternative 
   (if_expr 
    (if_condition (string_literal)) 
    (then_consequence (string_literal)) 
    (else_alternative (string_literal))
   )
  )))

==================
3.15 Switch: main module with switch expr
==================

switch ( $animal )
   case "Cow" return "Moo"
   case "Cat" return "Meow"
   case "Duck" return "Quack"
   default return "What's that odd noise?"

---

(module 
    (switch_expr 
	(switch_value (var_ref (EQName (identifier)))) 
	(switch_clause (string_literal) (string_literal)) 
	(switch_clause (string_literal) (string_literal)) 
	(switch_clause (string_literal) (string_literal)) 
	(switch_default (string_literal))
    )
)

==================
3.16 Quantified Expressions: some
==================

some $foo in $baa satisfies $boo

---

(module 
 (quantified_expr 
  (quantified_in (var_ref (EQName (identifier))) (var_ref (EQName (identifier))))
  (quantified_satisfies (var_ref (EQName (identifier))))
 ))

==================
3.16 Quantified Expressions: every
==================

every $foo in $baa satisfies $boo

---

(module 
 (quantified_expr 
  (quantified_in (var_ref (EQName (identifier))) (var_ref (EQName (identifier))))
  (quantified_satisfies (var_ref (EQName (identifier))))
 ))

==================
3.17 Try/Catch Expressions
==================

try { 
} 
catch * { 
}

---

(module 
 (try_catch_expr 
  (try_clause (enclosed_expr)) 
  (catch_clause
   (catch_error_list (wildcard)) 
   (enclosed_expr)
  )))

==================
3.18.1 Instance Of: 
==================

5 instance of xs:integer

---

(module 
  (instance_of_expr (integer_literal) (sequence_type (EQName (identifier) (identifier)))))

==================
3.18.2 Typeswitch: main module with typeswitch expr
==================

typeswitch ( $node )
 case text() return $node
 case element() return $node
 default return "unknown"

---

(module 
 (typeswitch_expr 
  (typeswitch_operand (var_ref (EQName (identifier)))) 
  (typeswitch_clause 
   (typeswitch_case_type (sequence_type (text_test))) 
   (typeswitch_case_return (var_ref (EQName (identifier))))) 
  (typeswitch_clause 
   (typeswitch_case_type (sequence_type (element_test))) 
   (typeswitch_case_return (var_ref (EQName (identifier))))) 
  (typeswitch_default (string_literal))
  ))

==================
3.18.3 Cast 
==================

$x cast as xs:integer

---

(module 
 (cast_as_expr 
  (var_ref (EQName (identifier))) 
  (single_type (EQName (identifier) (identifier)))
 ))


==================
3.18.4 Castable 
==================

$x castable as xs:integer

---

(module 
 (castable_as_expr 
  (var_ref (EQName (identifier)))
  (single_type (EQName (identifier) (identifier)))))

==================
3.18.5 Constructor Functions
==================

xs:date("2000")

---

(module 
 (function_call 
  (EQName (identifier) (identifier))
  (argument_list (argument (string_literal)))))

==================
3.18.6 Treat TODO 
==================

$myaddress treat as element(*)

---

(module 
 (treat_as_expr 
  (var_ref (EQName (identifier))) (sequence_type (element_test (param_wildcard)))))


==================
3.19 Simple map operator
==================

$emp ! ( $bang )

---

(module 
 (bang_expr 
  (var_ref (EQName (identifier))) 
  (parenthesized_expr (var_ref (EQName (identifier))))
 ))

==================
3.20 Arrow operator 
==================

$string => upper-case()
-------------------

(module 
  (arrow_expr (var_ref (EQName (identifier))) 
  (arrow_function_specifier (EQName (identifier)) (argument_list))
))


