==================
3.1.1 Literal: numeric integer
==================

12

---

(module (integer_literal))

==================
3.1.1 Literal: numeric decimal
==================

.5

---

(module (decimal_literal))

==================
3.1.1 Literal: numeric double
==================

5125E2

---

(module (double_literal))


==================
3.1.1 Literal: string double quotes
==================

 "hello world"

---

 (module (string_literal))

==================
3.1.1 Literal: string single quotes
==================

 'hello world'

---

(module  (string_literal))

==================
 3.1.1 Literal: string with escaped quotes
==================

"He said, ""I don't like it."""
---

(module  (string_literal))

==================
3.1.1 Literal: string with escape apos
==================

'He said, ''I don''t like it.'''

---

(module  (string_literal))

=================
3.1.1 Literal: string with predefined entity ref
==================

"Ben &amp; Jerry&apos;s"

---

(module  (string_literal))

==================
3.1.1 Literal: string with character reference
==================

"&#8364;99.50"

---

(module  (string_literal))

==================
3.1.2 Variable References: NCName
==================

$x

---

(module
  (var_ref (QName))
)

==================
3.1.2 Variable References: QName
==================

$example:fruit

---

(module 
 (var_ref (QName))
)

==================
3.1.2 Variable References: URIQualifiedName 	
==================

$Q{http://example.com/ns}invoice

-------------------

(module (var_ref (uri_qualified_name)))

==================
3.1.3 Parenthesized with constructed empty sequence
==================

()

-------------------

(module 
 (parenthesized_expr)
 )

==================
3.1.3 Parenthesized with constructed sequence one item 
==================

( 1 )

---

(module 
  (parenthesized_expr (integer_literal))
)

==================
3.1.3 Parenthesized with constructed sequence comma separated items
==================

( 1, 2 )

---

(module 
 (parenthesized_expr 
   (integer_literal)
   (integer_literal)
  )
 )

==================
3.1.3 Parenthesized with embeded sequences 5 items
==================

(10, (1, 2), (), (3, 4))

---

(module 
 (parenthesized_expr 
   (integer_literal) 
   (parenthesized_expr (integer_literal) (integer_literal)) 
   (parenthesized_expr) 
   (parenthesized_expr (integer_literal) (integer_literal))
))

==================
3.1.4 Context Item Expression
==================

. 

---

(module 
   (context_item_expr) 
)

==================
3.1.5 Static Function Call with QName without arg
==================

fn:empty()

---

(module
 (function_call 
  (QName) 
  (argument_list)
 )) 

==================
3.1.5 Static Function Call with QName with arg
==================

empty( $foo )
---

(module
 (function_call 
  (QName)
    (argument_list (argument (var_ref (QName))
))))

==================
3.1.5 Static Function Call with EQName with hyphen
==================

my:hyphen-function( $foo )
---

(module
 (function_call 
  (QName)
    (argument_list (argument (var_ref (QName))
))))

==================
3.1.6 Named Function References:
==================

fn:abs#1

---

(module
 (named_function_ref 
  (QName) 
  (integer_literal)
 )) 

==================
3.1.7 Inline Function Expressions: simple
==================

function()  { 'hello world' }

---

(module
 (inline_function_expr 
   (param_list)
   (enclosed_expr (string_literal))
)) 

==================
3.1.7 Inline Function: with arg
==================

function ( $param1, $param2 )  {()}

---

(module
 (inline_function_expr
  (param_list (param (QName)) (param (QName)) )
  (enclosed_expr (parenthesized_expr)
)))

==================
3.1.7 Inline Function: with arg type declaration
==================

function( $a as empty-sequence() )  { () }

---

(module
(inline_function_expr
(param_list (param (QName) (sequence_type)))
(enclosed_expr (parenthesized_expr)
)))

==================
3.1.7 Inline Function:  with return type declaration
==================

function( $a as item() ) as item()  { () }

---

(module
 (inline_function_expr
  (param_list (param (QName) (sequence_type)))
  (sequence_type) 
  (enclosed_expr (parenthesized_expr)
)))

==================
3.1.7 Inline Function: sequence type occurrance indicator
==================

function( $a as item()* ) as item()+  { () }

---

(module
 (inline_function_expr
  (param_list (param (QName) (sequence_type (occurrence_indicator)))) 
  (sequence_type (occurrence_indicator))
  (enclosed_expr (parenthesized_expr)
)))

